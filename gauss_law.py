# gauss_law.py

# can use Gauss' Law of electric flux to find the flux through a given
# Gaussian surface, the charge enclosed by the surface, or the strength of the
# electric field, currently only works with point charges enclosed by spheres

import sympy

epsilon_0 = 8.85e-12  # vacuum permittivity constant
pi = sympy.pi


def charge_or_field():
    c_or_f = input("\nWhat is given?\n1. Charge Enclosed (Q)\n"
                   "2. Electric Field (E) and Radius\n")

    if c_or_f == "1":
        flux_from_charge()

    if c_or_f == "2":
        flux_from_field()


def flux_from_charge():
    Q = sympy.sympify(input("\nWhat is the charge enclosed?\n"))
    phi = Q / epsilon_0
    print(f"\nThe electric flux generated by a charge of {Q} C is {phi} Vm.\n")


def flux_from_field():
    E = sympy.sympify(input("\nWhat is the magnitude of the electric"
                            " field?\n"))
    r = sympy.sympify(input("\nWhat is the radius of the Gaussian sphere?\n"))
    A = 4 * r**2
    phi = E * A
    print(f"\nThe electric flux generated by a field of {E} N/C through a"
          f" sphere with surface area {A}\u03C0 m\u00B2 is {phi}\u03C0 Vm.\n")


def find_field():
    Q = sympy.sympify(input("\nWhat is the charge enclosed?\n"))
    r = sympy.sympify(input("\nWhat is the radius of the Gaussian sphere?\n"))
    A = 4 * r**2
    E = Q/(epsilon_0 * A)
    print(f"The electric field generated by charge of {Q} C in a Gaussian"
          f" sphere with surface area {A}\u03C0 m\u00B2 is {E}/\u03C0 N/C.\n")


def find_charge():
    E = sympy.sympify(input("\nWhat is the magnitude of the electric"
                            " field?\n"))
    r = sympy.sympify(input("\nWhat is the radius of the Gaussian sphere?\n"))
    A = 4 * r**2
    Q = E * A * epsilon_0
    print(f"\nThe charge generating an electric field {E} N/C, enclosed by a"
          f" Gaussian sphere with surface area {A}\u03C0  m\u00B2 is"
          f" {Q}\u03c0 C.\n")


while True:
    equation = input("\nWhat would you like to use Gauss' Law to find?\n"
                     "1. Electric Flux (\u03A6)\n2. Electric Field (E)\n"
                     "3. Charge Enclosed (Q)\n")

    if equation == "1":
        charge_or_field()

    if equation == "2":
        find_field()

    if equation == "3":
        find_charge()

    print("Press 'x' to exit, or press enter to try a new equation.")
    if input() == "x":
        break
